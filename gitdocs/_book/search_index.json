[["interface.html", "Chapter 2 Interface 2.1 Options (.a.yaml) 2.2 Layout (.u.yaml)", " Chapter 2 Interface 2.1 Options (.a.yaml) Every control the user sees in the input panel of our analysis must be defined in the *.a.yaml file. An example is this, generated by the jamovi compiler default settings: name: myRegression title: Regression analysis menuGroup: COOLj version: &#39;1.0.0&#39; jas: &#39;1.2&#39; options: - name: data type: Data - name: dep title: Dependent Variable type: Variable - name: group title: Grouping Variable type: Variable - name: alt title: Alternative hypothesis type: List options: - title: Not equal name: notequal - title: One greater name: onegreater - title: Two greater name: twogreater default: notequal Each option should have a name and a type. Depending to the type, other properties can be defined. For our purposes, we need a Variable type to input dependent variable and a Variables type to input independent variables, plus the Data type that will pass the spreadsheet data to the R package. name: myRegression title: Regression analysis menuGroup: COOLj version: &#39;1.0.0&#39; jas: &#39;1.2&#39; - name: data type: Data - name: dep title: Dependent Variable type: Variable permitted: - numeric - name: covs title: Covariates type: Variables suggested: - continuous - ordinal permitted: - numeric First, notice the menuGroup property. That says in which menu the analysis will appear in jamovi. Because the COOLj menu does not exist, the compiler will create one. Later we see how to put your module under pre-existing menus. Now, the dep option will contain the dependent variable, and the property permitted allows the user to input only numerical variables (see appendix ??) for more details about variables types in jamovi). The covs option will contain the numeric independent variables, and the GUI will signal with little icons that the field expects continuous or ordinal variable, ruled by the property suggested. The complete list of options and their properties can be found at the jamovi hub At this point we compile it and see what happens. jmvtools::install() If everything went as expected, you should see the COOLj module in jamovi. You do not need to restart jamovi, the compiler would restart the internal engine automatically and you should see the new module. 2.2 Layout (.u.yaml) We need to decide how to lay out the options in the GUI. The layout of the GUI is made of a series of LayoutBox, empty containers that host the controls (the options) as their children. Our options are all numeric, so require an text input control named TextBox. The layout is basically an HTML page, so one can think of a LayoutBox as a &lt;div&gt;, containing all the controls &lt;input type=\"text\"&gt;,&lt;input type=\"checkbox\"&gt; etc. For now, we set it like this: --- title: Regression analysis name: powerReg jus: &#39;3.0&#39; stage: 0 compilerMode: tame children: - type: LayoutBox margin: large children: - type: TextBox name: es format: number - type: TextBox name: alpha format: number - type: TextBox name: power format: number ... Notice that we set compiler: to tame, because it tells the jamovi compiler not to override our layout. jmvtools::install() "]]
