% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SmartTabs.R
\name{SmartTable}
\alias{SmartTable}
\title{SmartTable R6 Class}
\description{
A programmer interface to init and polutate \code{\link[jmvcore]{jmvcore::Table}}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{name}}{the name of the \code{\link[jmvcore]{jmvcore::Table}}}

\item{\code{table}}{\code{\link[jmvcore]{jmvcore::Table}}}

\item{\code{nickname}}{the unique identifier of the table used by other classes
to dispatch messages to the table or to interact with it. It is usually
used internally, but it is left public for ease to access and debug.}

\item{\code{expandOnInit}}{if TRUE, the jamovi table is expanded columnwise
if the data.frame passed in the init are more than the ones defined
in .r.yaml file. If FALSE (default) additional columns passed on init
are ignored}

\item{\code{expandOnRun}}{if TRUE, the jamovi table is expanded columnwise
if the data.frame passed in to the run function are more than the ones defined
in .r.yaml file.  If FALSE (default) additional columns passed on run
are ignored.}

\item{\code{expandSuperTitle}}{a character string. If not NULL, the expanded columns are
supertitled with the string}

\item{\code{expandFrom}}{from which column should the table be expanded}

\item{\code{activated}}{SmartTable are populated (run) if their source
is not NULL and they are visible. jamovi tables with \code{visible: false}
in the .r.yaml file can be make visible and activated with this option TRUE}

\item{\code{key}}{This should be explained in a vignette}

\item{\code{keys_sep}}{This should be explained in a vignette}

\item{\code{keys_raise}}{This should be explained in a vignette}

\item{\code{spaceBy}}{a vector of columns names, \code{\link[jmvcore]{jmvcore::Table}} columns can add extra space
between rows to enhance readability.  Passing one or more column names put an extra padding
when a new value is fond in the column.}

\item{\code{spaceAt}}{a vector of rows indices, \code{\link[jmvcore]{jmvcore::Table}} columns can add extra space
between rows to enhance readability.  An extra space will be added after the rows with the provided
indices.}

\item{\code{spaceMethod}}{I do not remeber what this does, but it was cool}

\item{\code{indent}}{a vector of row indices. Indent (shift a bit on the right) the value of
the first column of each row index provided}

\item{\code{combineBelow}}{a vector of column names or column indices. \code{\link[jmvcore]{jmvcore::Table}} columns can hide repeated consecutive
values in a column by setting \verb{combineBelow:} column property in r.yaml file. This option allows
to set this properties programmatically on execution. The special key \verb{new!} means that all new
columns created at init or run time should be combineBelow.}

\item{\code{ci_info}}{this requires a vignette}

\item{\code{columnTitles}}{a named list of the form list(name=label). Change the title of
a jamovi table column named \code{name} to \code{label}.}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{initSource}}{If \code{estimator} is not passed to initialize()
set the source of the init() data used to initialize the table.
It can be:
\itemize{
\item a data.frame
\item a list of named lists
\item a function returning a data.frame or a list of named lists
}}

\item{\code{runSource}}{If \code{estimator} is not passed to initialize()
set the source of the run() data used to initialize the table.
if can be:
\itemize{
\item a data.frame
\item a list of named lists
\item a function returning a data.frame or a list of named lists
}}

\item{\code{activateOnData}}{If TRUE, check if the table got some data. For tables with
\code{visible: false} is the r.yaml file, makes them visible
if data are passed to it                             #'}

\item{\code{title}}{a string. Set the title of the jamovi table}

\item{\code{superTitle}}{a named list list(columnname=value). Set the superTitle
of \code{columnname} column to a \code{value}}

\item{\code{setColumnVisible}}{a list of column names to set visible}

\item{\code{hideOn}}{a named list list(name=value)
for columns in names(list(name=value))
hide the column if all its cells are equal to
value. Value it is typically \code{Inf}, \code{NA} or \code{NaN}}

\item{\code{debug}}{a logical.
Print debugging information in console. Default is FALSE of the value
of the constant \code{t_INFO} if exists.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SmartTable-new}{\code{SmartTable$new()}}
\item \href{#method-SmartTable-initTable}{\code{SmartTable$initTable()}}
\item \href{#method-SmartTable-runTable}{\code{SmartTable$runTable()}}
\item \href{#method-SmartTable-ci}{\code{SmartTable$ci()}}
\item \href{#method-SmartTable-retrieveNotes}{\code{SmartTable$retrieveNotes()}}
\item \href{#method-SmartTable-setNotes}{\code{SmartTable$setNotes()}}
\item \href{#method-SmartTable-setColumnTitle}{\code{SmartTable$setColumnTitle()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SmartTable-new"></a>}}
\if{latex}{\out{\hypertarget{method-SmartTable-new}{}}}
\subsection{Method \code{new()}}{
Initialize the SmartTable object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SmartTable$new(table, estimator = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{table}}{A jamovi table of class \code{\link[jmvcore]{jmvcore::Table}}}

\item{\code{estimator}}{optional \link[R6:R6Class]{R6}. If set, SmartTable inquires
the R6 class for init and run functions to initialize and populate the jamovi Table.
the R6 class should provide functions using the convention \code{init_[nickname]} and \verb{run_[nickname] where the }nickname` is the unique identifier given to the jamovi table. The unique identifiers can be
\itemize{
\item \strong{tablename}:            the name of the \code{\link[jmvcore]{jmvcore::Table}} in jamovi .r.yaml file
\item \strong{groupname_tablename}:  the name of the \code{\link[jmvcore]{jmvcore::Group}} parenting the table and the table name
\item \strong{arrayname}:            the name of the \code{\link[jmvcore]{jmvcore::Array}}  parenting the table and the table name
}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SmartTable-initTable"></a>}}
\if{latex}{\out{\hypertarget{method-SmartTable-initTable}{}}}
\subsection{Method \code{initTable()}}{
initialize the table from \code{initSource} or \code{estimator::run_[tablename]}, and
set all the aestetical and behavioral options passed to the table.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SmartTable$initTable()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SmartTable-runTable"></a>}}
\if{latex}{\out{\hypertarget{method-SmartTable-runTable}{}}}
\subsection{Method \code{runTable()}}{
fills the table from \code{runSource} or \code{estimator::run_[tablename]}, and
takes care of all aesthetic adjustment required
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SmartTable$runTable()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SmartTable-ci"></a>}}
\if{latex}{\out{\hypertarget{method-SmartTable-ci}{}}}
\subsection{Method \code{ci()}}{
a wrapper function to set a superTitle over upper and lower limits columns
of a confidence interval.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SmartTable$ci(
  aroot,
  width = 95,
  label = NULL,
  format = "{}\% Confidence Intervals"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{aroot}}{a string with the root name of the two columns. For example for \code{es_upper} and \code{es_lower}
the root is \code{es}.}

\item{\code{width}}{the width of the confidence interval.}

\item{\code{label}}{default NULL, prefix to put to the title of the Super Title.}

\item{\code{format}}{a \code{format} string of the type \verb{\{\}\% something as a title}. Default is \code{"{}\% Confidence Intervals"}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SmartTable-retrieveNotes"></a>}}
\if{latex}{\out{\hypertarget{method-SmartTable-retrieveNotes}{}}}
\subsection{Method \code{retrieveNotes()}}{
only used internally, however it should be public
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SmartTable$retrieveNotes()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SmartTable-setNotes"></a>}}
\if{latex}{\out{\hypertarget{method-SmartTable-setNotes}{}}}
\subsection{Method \code{setNotes()}}{
set a note to the child table. Not necessary if a \code{Dispatch} object is used instead
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SmartTable$setNotes(note)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{note}}{a string: the message to set}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SmartTable-setColumnTitle"></a>}}
\if{latex}{\out{\hypertarget{method-SmartTable-setColumnTitle}{}}}
\subsection{Method \code{setColumnTitle()}}{
change the title of a column
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SmartTable$setColumnTitle(name, title)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{a string: the name of the column}

\item{\code{title}}{a string: the new title of the column}
}
\if{html}{\out{</div>}}
}
}
}
